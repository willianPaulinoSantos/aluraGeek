/*Poderia reutilizar as regras no arquivo home/cabecalho.css para estilizar esse cabecalho. Porém eu quis brincar com atributos de itens do flex-box, nesse caso o flex-grow, para ajustar o tamanho dos elementos no cabecalho. Resultados: 

Lado bom: O comportamento dos elementos ficou totalmente proporcional e adorei o comportamento com a variação de tamanho de tela, se ajusta muito bem e os itens diminuem na mesma proporção.

Lado ruim: fica mais dificil ler e entender meu código, por causa das contas do flex-grow. Nesse código eu pego o espaço sobrando entre a div .cabecalhoLogin-logoPesquisa e o elemento .cabecalhoLogin-btn_login, atribuo 0.4 partes desse espaço para a div .cabecalhoLogin-logoPesquisa. Pego esse espaço e atribuo a tag filha da .cabecalhoLogin-logoPesquisa, para o .cabecalho-campo_pesquisa. Não é tão claro como isso foi feito e porque, e tive pouco controle sobre a matemática (é preciso elaborar um pouquinho mais, nada complicado). 
*/

.cabecalhoLogin{
    align-items: center;
    display: flex;
    justify-content: space-between;
    padding: 0 9.5rem;
}

.cabecalhoLogin-logoPesquisa {
    align-items: center;
    display: flex;
    justify-content: space-between;
    flex-grow: 0.4; /* atribui a div logo+pesquisa 40% de uma parte do espaço entre essa div e o botão login*/
}

.cabecalhoLogin-barraPesquisa{
        display: flex;
        justify-content: space-between;
        flex-grow: 0.8802;
        height: 2.5rem;
        background-color: #F5F5F5;
        border-radius: 50px;
        padding: 0.3rem;
}

.cabecalho-campo_pesquisa {
    border: none;
    flex-grow: 1;
    background-color: #F5F5F5;
    border-radius: 5px;
    padding-left: 0.7rem;
}

.cabecalho-campo_pesquisa:focus{
    outline: none;
}

.cabecalhoLogin-pesquisa_lupa{
    width: 1.15rem;
    padding-right: 0.5rem;
}

.cabecalhoLogin-btn_login{
    flex-grow: 0.2425;
}

.cabecalhoLogin-pesquisa_lupa-mobile{
    display: none;
}